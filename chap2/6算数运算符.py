print('加法',1+1)
print('减法',1-1)
print('乘法',2*3)
print('除法',10/2)
print('整除',10//3)
print('取余',10%3)
print('幂运算',2**4) # 2*2*2*2
# print(10/0) # ZeroDivisionError: division by zero 0 不可以当作除数


# 赋值运算符

x=20 # 直接赋值
y=10
x=x+y # 正常相加
print(x)  # 30
x+=y #想到与x=x+y
print(x) # 40

x*=y #想到与x=x*y
print(x)


# Python 链式赋值
x=y=c = 100
print(x,y,c)
# Python 系列解包赋值
a,b = 1,2 # a=1,b=2
print(a,b)
## 交换赋值
a,b=b,a


# 比较运算符
print('大于',98>90)
print('小于',98<90)
print('等于',98==90)
print('不等于',98!=90)
print('大于等于',98>=90)
print('小于等于',98<=90)



# 逻辑运算符
"""
and 逻辑与 表达式1 and 表达式2    从左到右
or  逻辑或 表达式1 or  表达式2    从左到右
not 逻辑非  not  表达式           从右到左
"""
print(True and True) # true
print(True and False) # false
print(False and False) # false
print(False and True) # false
print('-' * 40)

# 使用表达式
print(8>7 and 6>5) # true
print(8>7 and 6<5) # False
print(8<7 and 10/0) # False  10/0 并没有运算 因为第一个表达式 为 false 直接得到结果 那么第二个表达式 就不会再运行

print('-' * 40)
# 全部都为False 才false
print(True or True) # true
print(True or False) # true
print(False or False) # False
print(False or True)  # true
print('-' * 40)

print(8>7 or  10/0) # True 左侧的表达式结果为True or 右侧表达式就不会执行了
print('-' * 40)
# 取反
print(not True) # False
print(not False)  # True
print(not (8 > 7)) # 本身是 TRUE 但是 使用 not 取反了 所以是False


# 位运算符
"""
位运算符 把数字 看作二进制来进行计算的

按 位与 运算 &
0000 0000 0000 1100
0000 0000 0000 1000
运算结果为
0000 0000 0000 1000

只要为 0 就是0
---------------------------------
按 位或 运算 |
0000 0000 0000 1100
0000 0000 0000 1000
运算结果为
0000 0000 0000 1100
只要为1就为1
---------------------------------
按 位异或 运算 ^
0000 0000 0001 1111
0000 0000 0001 0110
运算结果为
0000 0000 0000 1001
只要为1就是0 只要有一个是0就是 1
---------------------------------
按 位取反 运算 ~
0000 0000 0111 1011
1111 1111 1000 0100
0取反为1 1取反为0
---------------------------------
按 左移位 运算 <<
0000 0000 0000 0001
0000 0000 0000 0100
往左移动两位
---------------------------------
按 右边移位 运算 >>
0000 0000 0000 0100
0000 0000 0000 0001
往右移动两位
---------------------------------
可以用作是否包含权限信息进行使用该功能
"""

print('按位与运算',12&8)  # 12 转成 二进制 是 1100 8是 1000 所以 那么就是 1100 也就是8
print('按位或运算', 4 | 8) # 4 转成 二进制 是 0100 8是 1000 所以 那么就是 1100 也就是8
print('按位异或运算',31^22) # 31 转成 二进制 11111  22 是10110 所以 在这里就是 1011 9
print('按位取反',~122)  # 122 转成 二进制1111010  所以取反 是 -123
print('左移位',2<<2) # 8 标识 2向左移动两位 2*2*2
print('左移位',2<<3) # 相当于2*2*2*2
print('右移位',8>>2) # 8 标识 2向右移动两位 8//2, 4//2
print('右移位',-8>>2) # -2



"""
 本章总结
》保留字是Python已经被赋予特定意义的一些单词，保留字严格区分大小写
》 标识符可用来给变量、函数、类、模块和其他对象命名
》标识符的命名规则：
    ■可以是字母（包含中文）、数字、下划线，第一个字符不能是数字不能是Python中的保留字
    ■标识符严格区分大小写
    ■以下划线开头的标识符有特殊意义，不能随便使用
    ■充许使用中文作为标识符，但不建议使用


》变量的语法结构：
    ■变量名 =value
》整数类型有四种表示形式：二进制、八进制、十进制和十六进制
》浮点数可以使用内置函数round()限定运算结果需要保留的小数位数
》字符串又称为不可变字符序列，可根据索引检索元素，也可根据索引进行切片操作
》布尔类型有两种取值True和False


》常用的数据类型转换函数为int()、 float()和str()
》内置函数eval()可接字符串转换成真实的数据类型
》算术运算符： +、 -、 *、 /、 //、 %、 **
》赋值运算符： =、 + =、 -=、 *=、 / =、 // =、 % =、 ** =
》比较运算符： >、 > =、 <、 < =、 = =、 !=
》逻辑运算符： and、 or、 not
》位运算符： ＆、|  、 ^、 ～、 < <、 > >
"""


# 实战
num=input('请输入四位的整数')
print(num[0])
print(num[1])
print(num[2])
print(num[3])
